package Template::TT3::Services;

use Template::TT3::Factory::Class
    version     => 2.71,
    debug       => 0,
    item        => 'service',
    path        => 'Template(X)::(TT3::|)Service',
    constants   => 'HASH';


sub type_args {
    my $self = shift;
    my $type = shift;
    my $args = @_ == 1
             ? (ref $_[0] eq HASH ? shift : { template => shift })
             : { @_ };
    
    $args->{ services } = $self;
    
    return ($type, $args);
}
    

1;

__END__

=head1 NAME

Template::TT3::Services - factory module for loading template services

=head1 SYNOPSIS

    use Template::TT3::Services;
    
    # Create a services factory object
    my $services = Template::TT3::Services->new;
    
    # Create some service components
    my $input   = $services->service('input');
    my $header  = $services->service( header  => 'site/header.tt3'  );
    my $footer  = $services->service( footer  => 'site/footer.tt3'  );
    my $wrapper = $services->service( wrapper => 'site/wrapper.tt3' );
    my $output  = $services->service('output');
    
    # Now construct a service pipeline starting with an input...
    my $service = $input->service;
    
    # ...followed by each of the service components...
    $service = $header->service($service);
    $service = $footer->service($service);
    $service = $wrapper->service($service);
    
    # ...and ending with an output
    $service = $output->service($service);
    
    # We need a runtime context
    use Template3;
    my $context = Template3->context;
    
    # Then we can run the service and it all Just Works[tm]
    print $service->({
        context => 
    });
    
    # Change the environment to affect components in the pipeline
    my $env = {
        context => Template::TT3::Context->new,
        input   => 'another.tt3',
        header  => 'my/header.tt3',
        footer  => 'your/footer.tt3',
    };

    print $service->($env);

=head1 DESCRIPTION

This module is a subclass of L<Template::TT3::Factory> for locating, loading
and instantiating template service modules. Service modules are small 
pipeline components that perform small tasks to modify or augment the 
output generated by a template.  For example, services are used to add
headers, footers and page wrappers.

C<Template::TT3::Services> searches for service modules in the following
places:

    Template::TT3::Service
    Template::Service
    TemplateX::TT3::Service
    TemplateX::Service

For example, requesting a C<header> service returns a
L<Template::TT3::Service::Header> object.

    my $service = Template::TT3::Services->service('header');

=head1 METHODS

This module inherits all methods from the L<Template::TT3::Factory>,
L<Template::TT3::Base>, L<Badger::Factory> and L<Badger::Base> base classes.
The following methods are automatically provided by the L<Badger::Factory>
base class.

=head1 service($type)

Locates, loads and instantiates a service module.  This is created as an 
alias to the L<item()|Badger::Factory/item()> method in L<Badger::Factory>.

=head1 services()

Method for inspecting or modifying the services that the factory module 
manages.  This is created as an alias to the L<items()|Badger::Factory/items()> 
method in L<Badger::Factory>.

=head1 INTERNAL METHODS

=head1 type_args(@args)

This method replaces the default L<type_args()|Badger::Factory/type_args()>
method inherited from the L<Badger::Factory> base class. The first argument is
expected to be a service type that the factory can map to a module name,
e.g. C<header> which is mapped to L<Template::TT3::Service::Header>. If a
single non-hash reference argument follows then it is assume to be a template
name or some other reference from which a template can be constructed.

The end result is that you can write this:

    $service = $services->service( 
        header => 'example.tt3' 
    );

as a convenient shorthand for:

    $service = $services->service( 
        header => {
            template => 'example.tt3' 
        },
    );

=head1 PACKAGE VARIABLES

This module defines the following package variables.  These are declarations
that are used by the L<Badger::Factory> base class.

=head2 $ITEM

This is the name of the item that the factory module returns, and implicitly 
the name of the method by which .  In this case it is defined as C<service>.

=head2 $PATH

This defines the module search path for the factory.  In this case it is 
defined as a list of the following values;

    Template::TT3::Service
    Template::Service
    TemplateX::TT3::Service
    TemplateX::Service

=head1 AUTHOR

Andy Wardley  L<http://wardley.org/>

=head1 COPYRIGHT

Copyright (C) 1996-2009 Andy Wardley.  All Rights Reserved.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=head1 SEE ALSO.

This module inherits methods from the L<Template::TT3::Factory>,
L<Template::TT3::Base>, L<Badger::Factory>, and L<Badger::Base> base classes.

It loads modules and instantiates object that are subclasses of
L<Template::TT3::Service>. See L<Template::TT3::Service::Header>,
L<Template::TT3::Service::Footer> and the various other examples of 
specific service modules.

=cut

# Local Variables:
# mode: perl
# perl-indent-level: 4
# indent-tabs-mode: nil
# End:
#
# vim: expandtab shiftwidth=4:




