package Template::TT3::Service::Environment;

use Template::TT3::Class
    version => 2.70,
    debug   => 0,
    base    => 'Template::TT3::Service',
    config  => 'name=environment';


sub serve {
    my ($self, $env, $pipeline) = @_;

    # render the preceding pipeline content
    my $content = $pipeline->( $env );

    # see if we've got an environment template defined
    my $template = $self->template( $env )
        || return $content;

    $self->debug("** ENVIRONMENT **") if DEBUG;
#    $self->debug("env is ", $self->dump_data($env));

    my $extra = {
        alert => sub {
            $self->debug(@_)
        }
   };

    # fill it in, passing the current environment as a variable
    $template->fill_in( 
        $env->{ context }->with( env => $env, %$extra ),
    );

    # now render the reset of the pipeline
    return $content;
}


1;

__END__

=head1 NAME

Template::TT3::Service::Environment - service module to change the environment

=head1 SYNOPSIS

    use Template3;
    
    my $tt3 = Template3->new(
        environment => 'site/environment.tt3',
    );
    
=head1 DESCRIPTION

This module is a subclass of L<Template::TT3::Service> for running a template
environment the main page template is processed that can affect other items in the
environment used by the template service pipeline. It is typically used to 
set or change header, footers and/or layout templates.

=head1 CONFIGURATION OPTIONS

=head2 template

Used to specify the default template that should be processed by the
C<environment> service. It can be specified as anything that the
L<Template::TT3::Templates> L<template()|Template::TT3::Templates/template()>
method will accept, e.g. a template name, text references, subroutine
reference, etc.

C<template> is the default option for the service.  Thus the following:

    my $environment = Template::TT3::Services->service(
        environment => 'site/environment.tt3',
    );

is syntactic sugar for:

    my $environment = Template::TT3::Services->service(
        environment => {
            template => 'site/environment.tt3',
        },
    );

=head2 name

This can be used to change the name of the service component.  The default
name is C<environment>.  If a C<environment> is specified in the environment passed
to the pipeline service function then it will be used in preference to the 
default L<template>.

    $pipeline->(
        context     => $context,
        input       => 'example.tt3',
        environment => 'my/env.tt3',        # over-ride default template
    );

=head1 METHODS

This module implements the following methods in addition to those inherited
from the L<Template::TT3::Service>, L<Template::TT3::Base> and L<Badger::Base>
base class modules.

=head2 serve(\%env, $pipeline)

This is the main service method.  It is called automatically when the 
service is bound in a pipeline that is executed.  A copy of the environment
is passed as the first argument (a reference to a hash array).  A reference
to a subroutine representing the rest of the pipeline is passed as the 
second argument.

The method looks in the environment for an item named C<environment>, or
whatever alternate L<name> the service has been given. It processes the
template, passing a reference to the environment hash array as the C<env>
variable.  The template may alter the environment to affect subsequent
services in the template processing pipeline.

It discards any output generated by the template and then executes the
C<$pipeline> function to render the rest of the service pipeline. It returns
the output generated from the C<$pipeline> function.

If no C<environment> template is specified, or if it is set to any false value
(e.g. C<0> or the empty string C<''>) then it goes straight on to call the
C<$pipeline> function and returns its result.

=head1 AUTHOR

Andy Wardley  L<http://wardley.org/>

=head1 COPYRIGHT

Copyright (C) 1996-2009 Andy Wardley.  All Rights Reserved.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=head1 SEE ALSO.

This module inherits methods from the L<Template::TT3::Service>,
L<Template::TT3::Base> and L<Badger::Base> base classes.

Services are loaded and instantiated by the L<Template::TT3::Services> factory
module. This is accessible via the L<Template::TT3::Hub> module. The
L<Template::TT3::Engine::TT3> module uses the services module to construct a
template processing pipeline.

Other similar services include L<Template::TT3::Service::Header>
L<Template::TT3::Service::Footer> and L<Template::TT3::Service::Befpre>.

=cut

# Local Variables:
# mode: perl
# perl-indent-level: 4
# indent-tabs-mode: nil
# End:
#
# vim: expandtab shiftwidth=4:
