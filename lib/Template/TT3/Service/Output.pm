package Template::TT3::Service::Output;

use Template::TT3::Class
    version => 2.70,
    debug   => 0,
    base    => 'Template::TT3::Service',
    config  => 'name=output options';


sub serve {
    my ($self, $env, $pipeline) = @_;

    my $output = $env->{ $self->{ name } } 
        || $self->{ template };      # it's not really a template
        
    my $options = $env->{ output_options }
        || $self->{ options }
        || { };

    return defined $output
        ? $self->hub->output( $pipeline->($env), $output, $options )
        : $pipeline->($env);

}

1;

__END__

=head1 NAME

Template::TT3::Service::Output - service module for redirecting output

=head1 SYNOPSIS

    use Template3;
    
    Template3->render( 
        input  => 'hello.tt3',
        output => 'hello.html',
    );
    
=head1 DESCRIPTION

This module is a subclass of L<Template::TT3::Service>. It is usually the
final service component added to the end of a template service pipeline by the
L<Template::TT3::Engine::TT3> module. It redirects the output generated by
the preceding pipeline to the output target specified by the C<output>
environment parameter.  If this is undefined then the generated output is
returned.

=head1 CONFIGURATION OPTIONS

TODO: Change the 'template' parameter to be something else... it's inherited
from the base class because it's what most services use... but not all.

=head2 template

NOTE: The name of this parameter is confusing.  It's not a template at all.
It needs to be changed.

Used to specify the default template that should be used for output. It can
be specified as anything that the L<Template::TT3::Hub>
L<output()|Template::TT3::Hub/output()> method will accept, e.g. a
file name, text reference, subroutine reference, object with C<print()> method
or list reference.

C<template> is the default option for the service.  Thus the following:

    my $output = Template::TT3::Services->service(
        output => 'greeting.html',
    );

is syntactic sugar for:

    my $output = Template::TT3::Services->service(
        output => {
            template => 'greeting.tt3',
        },
    );

In most cases the C<output> won't be specified as a configuration option, but
provided as an environment parameter passed to the
L<render()|Template3/render()> method (implemented by
L<Template::TT3::Engine::TT3>).

    use Template3;
    
    print Template->render(
        input  => 'greeting.tt3',
        output => 'greeting.html'
    );

=head2 name

This can be used to change the name of the service component.  The default
name is C<output>.  If an C<output> is specified in the environment passed
to the pipeline service function then it will be used in preference to the 
default L<template>.

    $pipeline->(
        context => $context,
        input   => 'greeting.tt3',
        output  => 'greeting.html',
    );

=head1 METHODS

This module implements the following methods in addition to those inherited
from the L<Template::TT3::Service>, L<Template::TT3::Base> and L<Badger::Base>
base class modules.

=head2 serve(\%env)

This is the main service method. It is called automatically when the service
is bound in a pipeline that is executed. A copy of the environment is passed
as the first argument (a reference to a hash array). 

The method looks in the environment for an item named C<output>, or whatever
alternate L<name> the service has been given. If specified, it forwards the
output generated from the preceding service pipeline to the
L<Template::TT3::Hub> L<output()|Template::TT3::Hub/output()> method along
with the output parameter and any output C<options> (TODO: decide what this
should be called).

If no C<output> is specified in the environment then it simply returns
the generated output.

=head1 AUTHOR

Andy Wardley  L<http://wardley.org/>

=head1 COPYRIGHT

Copyright (C) 1996-2009 Andy Wardley.  All Rights Reserved.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=head1 SEE ALSO.

This module inherits methods from the L<Template::TT3::Service>,
L<Template::TT3::Base> and L<Badger::Base> base classes.

Services are loaded and instantiated by the L<Template::TT3::Services> factory
module. This is accessible via the L<Template::TT3::Hub> module. The
L<Template::TT3::Engine::TT3> module uses the services module to construct a
template processing pipeline.

Other similar services include L<Template::TT3::Service::Header>, 
L<Template::TT3::Service::Footer>, L<Template::TT3::Service::Layout>, 
L<Template::TT3::Service::Before> and L<Template::TT3::Service::After>.

=cut

# Local Variables:
# mode: perl
# perl-indent-level: 4
# indent-tabs-mode: nil
# End:
#
# vim: expandtab shiftwidth=4:
