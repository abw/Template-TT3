=head1 NAME

Template::TT3::TODO - TT3 To-Do List

=head1 INTRODUCTION

This is the To-Do list for TT3.  It is incomplete and in no particular order.

Please also consult L<Template::TT3::Status> which summarises the current
status of TT3 and lists the various modules that are done, doing and todo.

=head1 Language Elements

There are some fundamental issues relating to elements that need to be
addressed.  Most importantly, the current approach for determining if an
element should generate output is incomplete.  At present, an assignment 
inside a block (e.g. if, for, etc) will not have its output suppressed.

The C<value()> method returns the value of an expression (which for an 
assignment will be the value of the RHS.  The C<text()> method does the
same thing but (possibly) with optional processing.  In the case of an 
assignment, the C<text()> method suppresses the output.  The C<text()>
method will (or should) also complain if the value is undefined.

However, elements that contain a block always evaluate the content by calling
the C<value()> method on the child elements. In essence, these directives fail
to propagate to their children the fact that they're being called in text
context.  The obvious solution is to add the additional methods that allow 
a block to be called in value or text context.  However, it's not as simple 
as that.  We also want to support other modes like HTML.  Again, a call to 
C<html()> on a parent element should call the corresponding C<html()> method
on its children.  Adding a third method to every block directive is a 
possibility, but it's starting to smell of code bloat.  A better solution 
would be to find some way to implement this generically. 

Another issue relating to the above is that too many C<value()> methods 
are throwing errors on undefined values.  This is probably due to the fact
that many elements simple alias C<values()> to C<text()> or rely on the 
default implementation inherited from the L<Template::TT3::Element> base
class.

=head2 Loop Iterator

There's no equivalent of TT2's 'loop' iterator.  I want to have a little
rethink of the iterator API before I plug it in.

=head2 Ranges

    %%  for x in 1 to 101 by 10

This needs a proper loop iterator.

=head2 Thin Lambda Arrow

    %% a -> a + 1

Need to finish/cleanup the LHS signature recognition (almost there).

=head2 Parallel Assignment

    %% @a = @b

The assignment mechanism needs a little re-think.  The current as_lvalue()
hack is clunky.  They way it used to work (in the pre-badger prototype) was
probably better.

=head2 List Context Methods

    %% foo.@bar

The C<@> indicates that the method should be called in list context instead
of the default scalar context.  This required some tweakery in the object
variable modules and then updates to the element parsers.

=head2 Template Spec

    %% template = <example.tt3>     # fetch single template
    %% template = <foo.tt3 bar.tt>  # aggregate several templates

I'd like to implement a jQuery-like selection mechanism that will aggregate
over one or more templates.  As a minimum it would be useful to be able to 
find and reference a single template (although a C<find> keyword might do the
job just as well, if not better).

=head2 Non-Chaining Infix Operators

Figure out what non-chaining infix operators should do.

=head2 Elements Not Being Loaded

Figure out why element classes aren't being loaded.  e.g. declaring 
[ TAGS => ctr_tags => 0, 0 ] should load T::TT3::Element::Control::Tags
and fail if it doesn't exists.  The find() method appears to be returning
the class name without checking to see if it can be loaded.  (may be fixed?)

=head2 name(), pair() and pairs() methods

Add name(), pair() and pairs() methods to all elements that require them.

=head2 list_values() / items() methods

Change element 'list_values()' to 'items()', or figure out how to map it
properly onto value/values.

=head2 Signatures

Add T::TT3::Element::Signature which defines the signature construct. We need
this to reconstitute args for error reporting, e.g. in T::E::Command::Sub.

=head2 Optional Items in Function Signatures.

Add support to function signatures for optional items (e.g. foo(bar?) )
and default values (e.g. foo(bar=10) ).

=head2 Error Handling

The element base class has evolved a large and complicated set of error 
method (well, quick hacks to get things working) that need to be cleaned
up.  The new way is to call $element->fail(), e.g.

    $element->fail( syntax_on_fire => $a, $b, $c );

This raises a syntax exception (L<Template::TT3::Exception::Syntax>) using
the C<syntax_on_fire> message format (which doesn't really exist, BTW, I
just made it up) which should be defined in L<Template::TT3::Base>.  The
arguments ($a, $b, $c) are used to fill in the message format.

Eventually we should move all the messages out into a separate 
C<Template::TT3::Messages> module.  This should try and load an alternate
set based on some configuration variable, environment variable, etc., 
so that the message can be localised to different languages and/or marked
up as HTML.

=head1 Commands

=head2 fix the HTML commands like 'br' that don't expect any content

=head2 html

Move the temporary html() method in the 'Is' command to the T::TT3::HTML
module.  But it has to be installed into a base class for block commands
so that we don't need to poke it into is(), as(), for(), if(), etc., and
every other command that has block output.  That said, I'm not sure if it's
possible.  We may have to explicitly add html() methods to all the block
commands.  That feels like a little bit of a dirty specialisation, but we
have to embrace the fact that TT is (guessing) 99% used for generating 
HTML.  It would be better if we could do it generically (as original planned
for the HTML extensions - they would just adorn existing classes with 
html() methods).  But we can't expect the HTML extension to know about every
class.  Nor can we expect every block-based element to know about every 
possible output format (although asking them to know HTML wouldn't be so
bad).  Smells a bit dirty.

=head1 Controls

=head2 Merge COMMANDS and HTML_CMDS

Cleanup and merge C<COMMANDS> and C<HTML_CMDS> so that a single C<COMMANDS>
(or C<CMDS> for short) control can load commands from libraries, or complete
libraries.

=head2 Grammar Changes via C<COMMANDS> Should be Localised.

Changes to the grammar, e.g. via C<COMMANDS> are not localised.  They 
permanently modify the grammar.  Instead we should probably store the 
current keywords list in the lexical scope.  That also allows certain 
block directives (e.g. 'switch') install keywords within its scope (e.g.
'case').

=head2 Grammar Changes via C<COMMANDS> Should Affect All Tags.

C<COMMANDS> only installs commands into the grammar for the inline tag.  The
grammar should be shared between inline/outline and any other tags that share
the same grammar.  

=head2 TAGS with Outline Tags

Need to write some tests and if necessary, fix up TAGS control and Outline
tag so that the TAGS control can change the start tag

=head1 Scanner / Tags / Tagsets / Tokens

=head2 Refactor Tokens/Elements

The way that tokens and grammar are subclasses of elements is ugly.  And
I think the constructor creation makes things more confusing than they should
be.  Well, it works for now.

=head2 Preceding Text

Change the scanner to push the preceding text onto the output tokens before
calling the tag.  The tag can inspect $output->last if it want to do any 
pre-chomping (see the way the comment tag now works for an example).

=head1 Grammar

=head2 Split Grammar into Operators and Keywords

It might be worthwhile splitting the grammar into separate collections of
operators and keywords.  Other than the element construction (which should
probably also be moved out anyway), the only real thing the grammar does 
is to generate the regexen to match operators.  If keywords end up in the 
lexical scope then we might as downsize the grammar to an operator regex
compiler.

=head1 Template Evaluation

=head2 PARAMS

Figure out what to do with PARAMS.  They don't get recognised as HASH vars
so they don't get the same behaviours that it has.  e.g. "a(%b) = c(%b)".
Here the '%b' isn't expanded as a hash because it's a PARAMS not a HASH.

=head2 template_path

Avoid adding the default path to template_path so we can avoid creating
default file provider if we're only using text-based templates.


=head1 Factories

Add support to Badger::Factory for generic XXX_head and XXX_tail methods 
that add elements to the start or end of the path respectively.

Badger::Factory needs a cleanup and refactor to simplify what it does.
Probably best to cleave it back into 3 parts like it (well, its predecessor)
used to be.


=head1 Configuration

=head2 Amalgamating Arguments

Config needs to amalgamate arguments.  Decide if things like storage should
be enabled or not.  Hub needs to heed its call.

=head1 Hub

=head2 Cleanup

Need to implement a proper cleanup policy.

=head2 Memory Leakage

Also need to think *VERY* carefully about what different components may be
attaching to a prototype hub.  I'm concerned that creating a "leaf node"
template for temporary use in a subroutine might pull the whole framework
into persistence. 


=head1 Template Services

I'm not sure about the service pipeline architecture as it stands.  On one
hand, it's nice and simple.  On the other hand, it is perhaps too simple.
Things like branching and/or conditional execution of the pipeline are
not possible (or limited, at best).  It's also hard to intuit the execution
order of the pipeline because it depends on individual components.  

For example, the header component can elect to process the preceding pipeline
first and then add the header (in which case the main template can make
changes that affect the header, e.g. set a variable, update the environment,
etc) or it can process the header first and then do the main page template (in
which case the header can affect the template). In the case of the 'before'
component the distinction is much more clear cut - the 'before' template
should be processed before the main template. But with something like header,
you can't be so sure, and the only way to figure out the execution order for a
pipeline containing a header component is to know what the code in the header
component does. I don't like that.

One possible change is to have the components write to and from the 
environment 'content' parameter instead of executing the preceding pipeline
to get content.  But that would prevent components like error from wrapping
the execution in an error handler.

Perhaps we should revert to having simple decorator services that work on 
the content, but leaving other services to work on the pipeline if they 
prefer?  That might be the best approach.

=head2 Services and/or Decorators?

I'm a little wary about merging the higher level concepts of services
(stuff to do around a template) with the lower level decorating behaviours.
My first attempt had the low level items named Template::TT3::Decorator::*
and a Template::TT3::Service::Decorator service loaded the decorators.  But
that's not generic enough as there are plenty of useful service components
that we might want to write that, strictly speaking, aren't decorators 
(although at a pinch we could claim that they decorate the template processing
service).

On the other hand, I don't want to split them too far as it's important that
service pipelines and individual components are interchangeable.  Also, I think
there's a nice PSGI/Plack-like simplicity around the service components as
they stand.  That's a good thing.

=head2 Code Service

A generic service for running user-supplied subroutine refs.

=head2 Layout Service

Write the Template::TT3::Service::Layout module.  It should tweak the config
to add the main page template to the visit stack so that slots can resolve
from the main template.

=head2 Presentation Service

A generic (if possible) service that modifies the environment to select
headers, footers, etc., based on certain conditions (which would be the 
hard bit to make generic).  A good start would be to demonstrate a simple
CODE ref that does this.

=head2 Environment Service

The environment service is a quick hack to explore the kind of things that 
can be done when you can easily change the environment (e.g. changing or
removing the layout template based on file extension so that .css and .js
files get passed through without HTML headers, and so on).

It would probably be better to pass the C<env> variable to the C<before>
template and kill two birds with one stone.

=head2 Other Services

Other services that may be worth investigating are timers, debug controls, 
sitemap, etc.

=head1 AUTHOR

Andy Wardley  L<http://wardley.org/>

=head1 COPYRIGHT

Copyright (C) 1996-2009 Andy Wardley.  All Rights Reserved.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=head1 SEE ALSO

L<Template::TT3::Status> which summarises the current status of TT3 and
lists the component modules that are done, doing and todo.

=cut

# Local Variables:
# mode: perl
# perl-indent-level: 4
# indent-tabs-mode: nil
# End:
#
# vim: expandtab shiftwidth=4:


