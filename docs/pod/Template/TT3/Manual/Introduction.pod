=head1 NAME

Template::TT3::Manual::Introduction - an introduction to TT3

=head1 INTRODUCTION

This documentation provides an introduction to version 3 of the Template 
Toolkit (TT3).  

=head1 TT3 STATUS

TT3 is still in development. At present it should be considered alpha quality
code at best. It's good enough to process simple templates but lacks many of
the higher-level features that are present in TT2. For example, there are
currently no equivalents of the C<PRE_PROCESS> and C<WRAPPER> options, but
you can achieve a similar effect as long as you don't mind adding a few extra
lines of Perl code.

For the sake of your own sanity, I would think very carefully before even
considering using TT3 in a production system. Apart from the missing features,
there are absolutely no guarantees that the things that work today will still
be working tomorrow.  Consider this fair warning.

=head1 FINDING, FETCHING AND INSTALLING TT3

There are no CPAN releases of TT3 at present. Nor will there be until such
time as TT3 is considered stable enough to warrant a tentative first alpha
release.  That will be on Tuesday some time shortly after lunch (although
we can't say precisely I<which> Tuesday that will be).

Brave Perl hackers who don't mind getting their hands a bit dirty are 
invited to proceed as follows.  First, download and install the latest
version of L<Badger> from the source code repository.  

    $ git clone git://github.com/abw/Badger.git
    $ cd Badger
    $ perl Makefile.PL
    $ make
    $ make test
    $ sudo make install

Then download and install the latest version of C<Template::TT3>.

    $ git clone git://github.com/abw/Template-TT3.git
    $ cd Template-TT3
    $ perl Makefile.PL
    $ make
    $ make test
    $ sudo make install

Don't worry if a few tests fail for C<Template-TT3>.  Failing tests are 
encouraged at this point in time because they serve as reminders about 
what things are todo, or have been recently broken.  Remember, this is 
pre-alpha quality code so we're not expecting all tests to pass.

TT3's modules all live in the C<Template::TT3::*> namespace for now.  At
some point in the future they will be moved "up" a level to occupy the
C<Template> namespace, replacing the current TT2 modules.  At that time
the current TT2 C<Template::*> modules will be moved (or rather, replaced) 
permanently with their equivalents in C<Template::TT2::*>.

The L<Template3> module is a new TT3 version of the current TT2 L<Template>
module. This is also a temporary measure so that we don't trample on any
existing TT2 modules. L<Template3> will eventually become the new L<Template>
module.

=head1 USING TT3

First load the C<Template3> module.  Don't forget to C<use strict> and 
C<use warnings>, too (or use your favourite Perl tool that sets them for
you, e.g. C<use Badger>, C<use Moose>, C<use Modern::Perl>, etc.)
    
    use strict;
    use warnings;
    use Template3;

The C<process()> method will continue to be the general purpose all-on-one
template processing method.  However, this method is still TODO at the time 
of writing, so let's skip over that for now.  Use C<fill()> instead until
such time as L<process()> has been implemented properly.

You can call C<fill()> as a class method, like so:

    print Template3->fill( text => 'Hello World' );

The first argument is the template type, the second (in this case) is the
template text.  Here's an example that loads the template from a file.

    print Template3->fill( file => 'hello.tt3' );

Here's an example with some data.

    print Template3->fill( 
        text => 'Hello [% name %]',
        data => {
            name => 'World'
        },
    );

Here's an example using a C<Template3> object.

    my $tt3 = Template3->new;

    print $tt3->fill( 
        file => 'hello.tt3',
        data => {
            name => 'World'
        },
    );

Creating an object allows you to specify configuration parameters.  For
example, the C<template_path> option allows you to specify a location for
your templates. 

    my $tt3 = Template3->new(
        template_path => '/path/to/my/templates'
    );

If C<template_path> is specified then TT3 will I<only> serve templates from
that directory.  Otherwise it will serve templates from anywhere in the 
filesystem.  You can specify multiple locations using as array reference.

    my $tt3 = Template3->new(
        template_path => [
            '/path/to/my/templates',
            '/path/to/your/templates',
        ],
    );

Don't expect too many other options to work at the moment.  There are other
options (plenty of them, in fact), but there's no guarantee that specifying
them as options to the L<Template3> module will result in them being forwarded
to the correct internal module. The whole configuration mechanism needs some 
work to facilitate this.

=head1 AUTHOR

Andy Wardley L<http://wardley.org/>

=head1 COPYRIGHT

Copyright (C) 1996-2009 Andy Wardley.  All Rights Reserved.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=head1 SEE ALSO

L<Template::TT3::Manual::Language>

=cut

# Local Variables:
# mode: perl
# perl-indent-level: 4
# indent-tabs-mode: nil
# End:
#
# vim: expandtab shiftwidth=4:
