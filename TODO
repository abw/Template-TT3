There's lots TODO.  This file contains a few notes to remind me about 
some of the things that need to be done.  It is in no way meant to be 
a comprehensive list.

-----------------------------------------------------------------------

OPS

$   dollar
@   at
%   export
.   dot
..  num_range
to  num_to         # not just nums: 'A' to 'Z'
by  num_by         # ditto
?   if_then
:   if_else
->  arrow
=   assign
=>  fat_arrow

brackets: () [] {} <>

Delete position() and other source methods from T::Type::Text

Move the temporary html() method in the 'Is' command to the T::TT3::HTML
module.  But it has to be installed into a base class for block commands
so that we don't need to poke it into is(), as(), for(), if(), etc., and
every other command that has block output.  That said, I'm not sure if it's
possible.  We may have to explicitly add html() methods to all the block
commands.  That feels like a little bit of a dirty specialisation, but we
have to embrace the fact that TT is (guessing) 99% used for generating 
HTML.  It would be better if we could do it generically (as original planned
for the HTML extensions - they would just adorn existing classes with 
html() methods).  But we can't expect the HTML extension to know about every
class.  Nor can we expect every block-based element to know about every 
possible output format (although asking them to know HTML wouldn't be so
bad).  Smells a bit dirty.

Make if look for elsif/else

Handle the end / } terminator.  If it's 'end' then we shouldn't parse on
to the next elsif / else.

Figure out what non-chaining infix operators should do.

Figure out why element classes aren't being loaded.  e.g. declaring 
[ TAGS => ctr_tags => 0, 0 ] should load T::TT3::Element::Control::Tags
and fail if it doesn't exists.  The find() method appears to be returning
the class name without checking to see if it can be loaded.

Add name(), pair() and pairs() methods to all elements that require them.

Fix the regexes that are constructed for the outline tag so they don't 
consume newlines in comments, whitespace, etc.  Also make the end tag
optional and accept a simple string as a start token which gets compiled
to qr/^$start/.

